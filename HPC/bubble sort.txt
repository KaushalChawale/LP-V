#include <iostream>
#include <omp.h>
using namespace std;

void printArray(int* arr, int n) {
    for(int i = 0; i < n; i++)
        cout << arr[i] << " ";
    cout << endl;
}

void bubbleSort(int* arr, int n) {
    for(int i = 0; i < n-1; ++i)
        for(int j = 0; j < n-i-1; ++j)
            if(arr[j] > arr[j+1])
                swap(arr[j], arr[j+1]);
}

void parallelBubbleSort(int* arr, int n) {
    for(int i = 0; i < n; i++) {
        int first = i % 2;
        #pragma omp parallel for
        for(int j = first; j < n-1; j += 2) {
            if(arr[j] > arr[j+1]) {
                swap(arr[j], arr[j+1]);
            }
        }
    }
}

int main() {
    int n;
    cout << "Enter number of elements: ";
    cin >> n;

    int* original = new int[n];
    int* arr = new int[n];

    cout << "Enter " << n << " elements:\n";
    for(int i = 0; i < n; i++) {
        cin >> original[i];
    }

    // Sequential Bubble Sort
    copy(original, original+n, arr);
    double start = omp_get_wtime();
    bubbleSort(arr, n);
    double end = omp_get_wtime();
    cout << "Sequential Bubble Sort Time: " << end - start << " seconds" << endl;
    cout << "Sorted Array: ";
    printArray(arr, n);

    // Parallel Bubble Sort
    copy(original, original+n, arr);
    start = omp_get_wtime();
    parallelBubbleSort(arr, n);
    end = omp_get_wtime();
    cout << "Parallel Bubble Sort Time: " << end - start << " seconds" << endl;
    cout << "Sorted Array: ";
    printArray(arr, n);

    delete[] arr;
    delete[] original;
    return 0;
}
